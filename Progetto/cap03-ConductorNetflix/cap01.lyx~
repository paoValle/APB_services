#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{listings,xcolor,courier,bookmark}
\usepackage{listingsutf8}
\definecolor{darkblue}{named}{blue}
\definecolor{darkred}{named}{red}
\definecolor{grau}{named}{gray}
\let\Righttorque\relax
\lstset{
captionpos=b,
commentstyle=\color[rgb]{0.133,0.545,0.133},
keywordstyle=\color{darkblue},
stringstyle=\color{darkred},
extendedchars=true,
basicstyle=\small\ttfamily,
showstringspaces=false,
tabsize=2,
numbers=left,
numberstyle=\tiny,
breakautoindent  = true,
breakindent      = 2em,
breaklines       = true,
postbreak        = ,
prebreak         = \raisebox{-.8ex}[0ex][0ex]{\Righttorque},
showspaces=false, 
showtabs=false, 
showstringspaces=false,
language=VHDL,
frame=single,
morecomment=[s]{--}
}


\renewcommand*{\lstlistingname}{Codice Componente}


\usepackage{fancyhdr}
\pagestyle{fancy}

\fancyhead{} 
\fancyfoot{} 

\fancyhead[RO,LE]{\bfseries \leftmark}
\fancyfoot[LE,RO]{\thepage}
\fancyfoot[LO,CE]{Tesina in ASE: Architetture dei Sistemi di Elaborazione}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}

\date{}
\cfoot{}
\usepackage{eso-pic,graphicx}
\makeatletter
\newcommand\BackgroundPicture[2]{
\setlength{\unitlength}{1pt}
\put(0,\strip@pt\paperheight){
\parbox[t][\paperheight]{\paperwidth}{
\vfill
\centering\includegraphics[angle=#2]{#1}
\vfill
}
}
}
\makeatother
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family rmdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset Graphics
	filename img/conductor.PNG
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Standard
Conductor è un orchestratore di servizi, creato principalmente per orchestrare
 i servizi offerti da Netflix.
 Presenta le seguenti caratteristiche:
\end_layout

\begin_layout Itemize
permette la creazione di processi complessi in cui ogni task viene implementato
 come un microservizio
\end_layout

\begin_layout Itemize
il flusso di esecuzione è definito in JSON 
\end_layout

\begin_layout Itemize
garantisce tracciabilità e visibilità all'interno dei flussi di esecuzione
\end_layout

\begin_layout Itemize
permette il riuso di microservizi esistenti
\end_layout

\begin_layout Itemize
mette a disposizione un'interfaccia grafica per visualizzare il flusso di
 esecuzione
\end_layout

\begin_layout Itemize
permette la sincronizzazione dei task
\end_layout

\begin_layout Itemize
è scalabile in quanto è capace di gestire molti flussi di esecuzione contemporan
eamente
\end_layout

\begin_layout Itemize
la cominucazione è realizzata mediante richieste HTTP oppure RPC.
\end_layout

\begin_layout Standard
Nella realizzazione di Conductor è stata preferita l'orchestrazione alla
 coreografia in quanto la prima permetteva una scalabilità migliore.
 
\end_layout

\begin_layout Standard
Di seguito è mostrata l'architettura ad alto livello di Conductor.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename img/architettura.PNG
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Standard
Conductor segue il modello di comunicazione basato su RPC in cui i workers
 sono in esecuzione su una macchina separata dal server.
 I workers comunico con il server mediante richieste HTTP.
 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename img/comunicazione.PNG
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Standard
Quindi:
\end_layout

\begin_layout Itemize
I workers sono remote systems e comunicano con conductor server mediante
 richieste HTTP (oppure tramite qualsiasi meccanismo che supporti RPC)
\end_layout

\begin_layout Itemize
Le Task Queues sono usate per schedulare i tasks.
\end_layout

\begin_layout Itemize
Per la persistenza dei dati viene utilizzato Dynomite.
\end_layout

\begin_layout Standard
Per il nostro progetto Conductor è stato installato su una macchina Linux.
 In particolare è stato installato un 
\begin_inset Quotes eld
\end_inset

In-Memory Server
\begin_inset Quotes erd
\end_inset

 e quindi i dati non vengono veramente memorizzati sul disco, ma sono persi
 una volta spento il server.
\end_layout

\begin_layout Standard
In particolare i passi seguiti sono:
\end_layout

\begin_layout Itemize

\series bold
https://github.com/Netflix/conductor
\series default
 per clonare la repo scaricando in formato zip
\end_layout

\begin_layout Itemize

\series bold
sudo unzip nomefile.zip
\series default
 
\end_layout

\begin_layout Itemize

\series bold
sudo chmod 777 conductor-master -R
\series default
 : in modo da avere tutti i permessi sulla cartella.
 
\end_layout

\begin_layout Itemize
Dal sito 
\series bold
https://search.maven.org/#search%7Cga%7C1%7Cnetflix%20conductor
\series default
 scaricare il file con estensione all.jar relativo a:
\end_layout

\begin_deeper
\begin_layout Itemize
GroupID: com.netflix.conductor
\end_layout

\begin_layout Itemize
artifact: conductor-server-all
\end_layout

\begin_layout Itemize
versione: 1.6+
\end_layout

\end_deeper
\begin_layout Itemize
Creare nella directory conductor-master/server la cartella build
\end_layout

\begin_layout Itemize
Creare nella directory build la cartella libs
\end_layout

\begin_layout Itemize
copiare nella directory conductor-master/server/build/libs il file scaricato
 precedentemente
\end_layout

\begin_layout Itemize
eseguire il comando 
\series bold
copy ./server/build/libs/conductor-server-*-all.jar /app/libs
\series default
 posizionandosi nella directory conductor-master 
\end_layout

\begin_layout Itemize
a questo punto effettuare i comandi:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
cd docker
\end_layout

\begin_layout Itemize

\series bold
docker-compose build (attendere la terminazione)
\end_layout

\begin_layout Itemize

\series bold
docker-compose up
\end_layout

\end_deeper
\begin_layout Standard
Per interagire con l'interfaccia grafica è necessario aprire un browser
 e digitare localhost:5000, mentre per interagire con Swagger, è necessario
 digitare localhost:8080.
\end_layout

\begin_layout Standard
Tramite l'interfaccia grafica è possibile osservare i task e i workflow
 presenti in Conductor e il loro stato di esecuzione (Running, Complete,
 Failed, Terminate), mentre con Swagger è possibile gestire i task e i workflow
 per crearne di nuovi o modificarli.
 
\end_layout

\begin_layout Section
Lavorare con Conductor
\end_layout

\begin_layout Standard
Conductor si basa principalmente su due concetti principali:
\end_layout

\begin_layout Itemize
Workflow
\end_layout

\begin_layout Itemize
Task.
\end_layout

\begin_layout Subsection
Workflow
\end_layout

\begin_layout Standard
I workflows sono definiti utilizzando un linguaggio di dominio basato su
 JSON (JSON based DSL) e includono i task che sono eseguiti come parte del
 workflow.
 
\end_layout

\begin_layout Subsection
Tasks
\end_layout

\begin_layout Standard
I task devono essere necessariamente registrati prima di essere eseguiti
 in un workflow.
 Si hanno due categorie di task:
\end_layout

\begin_layout Itemize
System Task
\end_layout

\begin_layout Itemize
Worker Task
\end_layout

\begin_layout Subsubsection
System Tasks
\end_layout

\begin_layout Standard
I System Tasks sono eseguiti all'interno della JVM di Conductor e sono gestiti
 da quest'ultimo.
 Abbiamo vari tipi di System Tasks:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Task
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scopo
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dynamic Task
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
definito in maniera dinamica in base all'input
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Decision
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Implementa uno switch..case
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fork
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Definisce l'esecuzione parallela di un insieme di task.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dynamic Fork
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
I task da eseguire in parallelo sono decisi in base all'input.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Join
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Unione di rami paralleli
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sub Workflow
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Necessario per la realizzazione di workflow innestati
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wait
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
HTTP
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Event
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Produce un evento
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Worker tasks
\end_layout

\begin_layout Standard
I worker tasks sono implementati dalle applicazioni ed eseguono in un ambiente
 separato dal Conductor.
 Possono essere implementanti in qualsiasi linguaggio di programmazione.
 comunicanco con il Conductor server tramite delle REST ASPI.
 Nel modello sono definiti 
\begin_inset Quotes eld
\end_inset

SIMPLE
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Di seguito è mostrato uno schema dei possibili stati di un task o di un
 workflow.
 
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename img/ciclo di vita.PNG
	rotateOrigin center

\end_inset


\end_layout

\end_body
\end_document
